resilience4j.circuitbreaker:
  instances:
    remoteServiceA:
      registerHealthIndicator: true
      slidingWindowSize: 100
    remoteServiceB:
      registerHealthIndicator: true
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 3
      slidingWindowType: TIME_BASED
      minimumNumberOfCalls: 20
      waitDurationInOpenState: 50s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
#      recordFailurePredicate: io.github.robwin.exception.RecordFailurePredicate

resilience4j.retry:
  instances:
    remoteServiceA:
      maxAttempts: 3
#      waitDuration: 10s
#      enableExponentialBackoff: true
#      exponentialBackoffMultiplier: 2
#      retryExceptions:
#        - java.lang.RuntimeException
#      ignoreExceptions:
#        - io.github.robwin.exception.BusinessException
    remoteServiceB:
      maxAttempts: 3
      waitDuration: 10s
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
#      ignoreExceptions:
#        - io.github.robwin.exception.BusinessException

resilience4j.bulkhead:
  instances:
    remoteServiceA:
      maxConcurrentCalls: 10
    remoteServiceB:
      maxWaitDuration: 10ms
      maxConcurrentCalls: 20

resilience4j.thread-pool-bulkhead:
  instances:
    backendC:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1

resilience4j.ratelimiter:
  instances:
    remoteServiceA:
      limitForPeriod: 10
      limitRefreshPeriod: 1s
      timeoutDuration: 0
      registerHealthIndicator: true
      eventConsumerBufferSize: 100
    remoteServiceB:
      limitForPeriod: 6
      limitRefreshPeriod: 500ms
      timeoutDuration: 3s

resilience4j.timelimiter:
  instances:
    remoteServiceA:
      timeoutDuration: 2s
      cancelRunningFuture: true
    remoteServiceB:
      timeoutDuration: 1s
      cancelRunningFuture: false